// *************************************
//
//   Mixins
//
// *************************************

// ----- Caret ----- //
// -> Creates a caret (arrow) icon
//
// $side - the side the caret is on
// $size - the caret size
// $color - the caret color

// Requires this function (replaces Compass)

@function opposite-position($side)
  @if $side == 'top'
    @return 'bottom'
  @if $side == 'bottom'
    @return 'top'
  @if $side == 'left'
    @return 'right'
  @if $side == 'right'
    @return 'left'

=caret($side, $size, $color)
  $opposite: opposite-position($side)
  border: $size solid transparent
  border-#{$opposite}: $size solid $color
  border-#{$side}: 0
  bottom: auto
  content: ''
  display: block
  height: 0
  left: 50%
  margin: (-$size) 0 0 (-$size)
  margin-#{$side}: 0
  position: absolute
  right: auto
  top: 50%
  width: 0
  #{$side}: -$size
  #{$opposite}: auto

// ----- Font Face ----- //
// -> https://github.com/thoughtbot/bourbon/edit/master/app/assets/stylesheets/css3/_font-face.scss#
//
// $family - the font-family
// $path - the font path
// $weight - the font-weight
// $style - the font-style
// $asset-pipeline - use the Rails asset pipeline (boolean)

=font-face($family, $path, $weight: normal, $style: normal, $asset-pipeline: true)
  @font-face
    font-family: $family
    font-style: $style
    font-weight: $weight
    @if $asset-pipeline == true
      src: font-url('#{$path}.eot')
      src: font-url('#{$path}.eot?#iefix') format('embedded-opentype'), font-url('#{$path}.woff') format('woff'), font-url('#{$path}.ttf') format('truetype'), font-url('#{$path}.svg##{$family}') format('svg')
    @else
      src: url('#{$path}.eot')
      src: url('#{$path}.eot?#iefix') format('embedded-opentype'), url('#{$path}.woff') format('woff'), url('#{$path}.ttf') format('truetype'), url('#{$path}.svg##{$family}') format('svg')

// ----- Respond-within ----- //
// -> Generates a media query within a range
//
// $min - the initial breakpoint size
// $max - the larger breakpoint size
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

=respond-within($min, $max, $media: screen)
  @media #{$media} and (min-width: $min) and (max-width: $max)
    @content

// ----- Size ----- //
// -> Outputs width/height properties
//
// $width - the element width
// $height - the element height

=size($width, $height: $width)
  height: $height
  width: $width

// ----- State ----- //
// -> Combines state-related pseudo-classes
//
// $class - an optional state class ('is-active')

=state($class: false)
  @if $class
    &:active, &:focus, &:hover, &.#{$class}
      @content
  @else
    &:active, &:focus, &:hover
      @content

// ----- z-index ----- //
// -> http://www.smashingmagazine.com/2014/06/12/sassy-z-index-management-for-complex-layouts/
//
// $element - the name of the element in the list
// $list - the name of the list (defaults to `$zi-global`)

@function zi($element, $list: $zi-global)
  $index: index($list, $element)

  @if $index
    @return $index

  @warn 'There is no item "#{$element}" in this list; choose one of: #{$list}'
  @return null

